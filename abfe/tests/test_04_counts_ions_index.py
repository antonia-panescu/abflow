# abfe/tests/test_04_counts_ions_index.py
import shutil
from pathlib import Path
import pytest

from abfe.setup_vanilla_simulations import SimulationSetup
from abfe.tests import datafiles

def test_counts_merge_crystalwaters_and_indices(tmp_path, monkeypatch):
    """
    Medium-fast: run through crystal water merge and water count updates (real),
    then fake ions/index and ensure expected files are present.
    """

    # --- Arrange
    base_path = tmp_path / "test_setup"
    charmm_folder = base_path / "input_charmm"
    protein_folder = base_path / "input_protein"
    sdf_folder = base_path / "input_ligands"
    crystal_water = base_path / "crystal_waters.gro"

    shutil.copytree(datafiles.CHARMM.resolve(), charmm_folder)
    shutil.copytree(datafiles.PROTEIN.resolve(), protein_folder)
    shutil.copytree(datafiles.SDF_DIR.resolve(), sdf_folder)
    shutil.copy(datafiles.CRYSTAL_WATER.resolve(), crystal_water)

    # Ensure at least one SDF exists (defensive)
    if not any(sdf_folder.glob("*.sdf")):
        (sdf_folder / "DUMMY.sdf").write_text("\n")

    target_mod = "abfe.setup_vanilla_simulations"

    # --- Seed a minimal topol.top that includes a SOL line for the real updaters to modify
    monkeypatch.setattr(
        SimulationSetup,
        "copy_parameterized_protein",
        lambda self: Path("topol.top").write_text(
            "; minimal topol for test\n"
            "[ system ]\nTest\n\n"
            "[ molecules ]\n; Compound   #mols\n"
            "Protein             1\n"
            "SOL                 0\n"
        ),
    )

    # --- Stubs to reach post-solve steps quickly (patch INTO setup_vanilla_simulations)
    monkeypatch.setattr(f"{target_mod}.param_lig", lambda sdf: Path("smirnoff").mkdir(exist_ok=True))
    monkeypatch.setattr(f"{target_mod}.organize_topologies", lambda: None)
    monkeypatch.setattr(f"{target_mod}.addligtop", lambda sdf: None)
    monkeypatch.setattr(f"{target_mod}.addliggro", lambda sdf: None)
    monkeypatch.setattr(f"{target_mod}.addligposres", lambda sdf: None)

    # Fake combine + mem includes (donâ€™t care about contents here)
    def _fake_copy_complex2membrane():
        Path("complex_membrane.gro").write_text("combined\n")
    monkeypatch.setattr(f"{target_mod}.copy_complex2membrane", _fake_copy_complex2membrane)
    monkeypatch.setattr(f"{target_mod}.addmemtop", lambda sdf: None)

    # Minimal valid GRO writer so MDAnalysis can parse it during real merge
    def _write_minimal_gro(path: Path):
        path.write_text(
            "Generated by test\n"
            "1\n"
            "    1SOL     OW    1   0.000   0.000   0.000\n"
            "   1.00000   1.00000   1.00000\n"
        )

    def _fake_solvate(waters: int):
        _write_minimal_gro(Path("solv.gro"))
        _write_minimal_gro(Path("solv_fix.gro"))
    monkeypatch.setattr(f"{target_mod}.solvate_system", _fake_solvate)

    # cp_mdps not critical here
    monkeypatch.setattr(f"{target_mod}.cp_mdps", lambda *_: None)

    # --- Let these three be REAL: merge_gro_files, update_topology_file, add_water2topology

    # Fake ions & index (avoid real gmx)
    monkeypatch.setattr(f"{target_mod}.addions", lambda gro: Path("system_solv_ions.gro").write_text("ions\n"))
    monkeypatch.setattr(f"{target_mod}.create_index", lambda gro: Path("index.ndx").write_text("[ System ]\n1-10\n"))

    # addtoppar2top as a small safe edit
    def _fake_addtoppar2top(top_path: str):
        p = Path(top_path)
        if p.exists():
            p.write_text(p.read_text() + "\n; toppar lines ensured\n")
    monkeypatch.setattr(f"{target_mod}.addtoppar2top", _fake_addtoppar2top)

    # Job scripts (avoid touching real templates)
    monkeypatch.setattr(
        f"{target_mod}.copy_jobscripts_vanilla",
        lambda templates, name, nodes: Path("submit.sh").write_text("#!/bin/bash\necho run\n"),
    )

    setup = SimulationSetup(
        base_path=base_path,
        charmm_folder=charmm_folder,
        protein_folder=protein_folder,
        sdf_folder=sdf_folder,
        crystal_water_gro=crystal_water,
        solvate_water_count=10286,
        crystal_water_count=136,
        num_nodes=1,
    )

    # --- Act
    setup.setup_all(repeats=1)

    # --- Assert (discover output folder robustly)
    complex_dirs = [p for p in base_path.iterdir() if p.is_dir() and p.name.startswith("complex_")]
    assert complex_dirs, "No complex_* output folder was created."
    outdir = complex_dirs[0] / "vanilla_rep_1"

    # Real-merge output
    merged = outdir / "solv_fix_crystal_water.gro"
    assert merged.exists(), "solv_fix_crystal_water.gro not created"

    # Topology updated by real functions
    topol = outdir / "topol.top"
    assert topol.exists(), "topol.top missing after copy"
    content = topol.read_text(errors="ignore")
    assert "SOL" in content, "Water 'SOL' entry not present in molecules section"

    # Ions & index stubbed outputs
    assert (outdir / "system_solv_ions.gro").exists(), "system_solv_ions.gro not created"
    assert (outdir / "index.ndx").exists(), "index.ndx not created"

    # Submission script created
    assert (outdir / "submit.sh").exists(), "Job submission script not written"
